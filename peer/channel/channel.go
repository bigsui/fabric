/*
Copyright IBM Corp. 2017 All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

		 http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package channel

import (
	"fmt"
	"strings"

	"github.com/hyperledger/fabric/common/flogging"
	"github.com/hyperledger/fabric/msp"
	"github.com/hyperledger/fabric/peer/common"
	pb "github.com/hyperledger/fabric/protos/peer"
	"github.com/spf13/cobra"
	"github.com/spf13/pflag"
)

const (
	channelFuncName = "channel"
	shortDes        = "Operate a channel: create|fetch|join|list|update|signconfigtx|getinfo."
	longDes         = "Operate a channel: create|fetch|join|list|update|signconfigtx|getinfo."
)

var logger = flogging.MustGetLogger("channelCmd")
// 是否需要orderer节点支持
type OrdererRequirement bool
//是否需要背书节点支持
type EndorserRequirement bool

const (
	EndorserRequired    EndorserRequirement = true
	EndorserNotRequired EndorserRequirement = false
	OrdererRequired     OrdererRequirement  = true
	OrdererNotRequired  OrdererRequirement  = false
)

var (
	// 创始块文件
	genesisBlockPath string

	// create related variables
	channelID     string
	channelTxFile string
	timeout       int
)

// 定义channel命令，并添加子命令
func Cmd(cf *ChannelCmdFactory) *cobra.Command {
	AddFlags(channelCmd)	// 添加peer channel命令参数
	channelCmd.AddCommand(createCmd(cf))	//添加子命令 创建通道
	channelCmd.AddCommand(fetchCmd(cf))		//添加子命令 获取区块
	channelCmd.AddCommand(joinCmd(cf))		//添加子命令 加入通道
	channelCmd.AddCommand(listCmd(cf)) 		//添加子命令 获取已加入的channel 列表
	channelCmd.AddCommand(updateCmd(cf))	//添加子命令 更新通道
	channelCmd.AddCommand(signconfigtxCmd(cf))	//添加子命令 签名配置
	channelCmd.AddCommand(getinfoCmd(cf))		//添加子命令  获取通道信息

	return channelCmd
}

// AddFlags adds flags for create and join
func AddFlags(cmd *cobra.Command) {
	// 添加 order参数 ，用于 channel create 、channel join
	common.AddOrdererFlags(cmd)
}

var flags *pflag.FlagSet

func init() {
	resetFlags()
}

// Explicitly define a method to facilitate tests
func resetFlags() {
	flags = &pflag.FlagSet{}

	flags.StringVarP(&genesisBlockPath, "blockpath", "b", common.UndefinedParamValue, "Path to file containing genesis block")
	flags.StringVarP(&channelID, "channelID", "c", common.UndefinedParamValue, "In case of a newChain command, the channel ID to create.")
	flags.StringVarP(&channelTxFile, "file", "f", "", "Configuration transaction file generated by a tool such as configtxgen for submitting to orderer")
	flags.IntVarP(&timeout, "timeout", "t", 5, "Channel creation timeout")
}

func attachFlags(cmd *cobra.Command, names []string) {
	cmdFlags := cmd.Flags()
	for _, name := range names {
		if flag := flags.Lookup(name); flag != nil {
			cmdFlags.AddFlag(flag)
		} else {
			logger.Fatalf("Could not find flag '%s' to attach to commond '%s'", name, cmd.Name())
		}
	}
}

// 定义 peer channel 命令
var channelCmd = &cobra.Command{
	Use:              channelFuncName,
	Short:            fmt.Sprint(shortDes),
	Long:             fmt.Sprint(longDes),
	// 执行命令前 添加order需要的参数
	PersistentPreRun: common.SetOrdererEnv,
}

type BroadcastClientFactory func() (common.BroadcastClient, error)

// ChannelCmdFactory holds the clients used by ChannelCmdFactory
type ChannelCmdFactory struct {
	EndorserClient   pb.EndorserClient		// 背书节点
	Signer           msp.SigningIdentity	// 签名
	BroadcastClient  common.BroadcastClient // 广播服务客户端
	DeliverClient    deliverClientIntf		// 分发服务客户端，发送区块请求消息
	BroadcastFactory BroadcastClientFactory	// 方法，用于获取BroadcastClient
}

// InitCmdFactory init the ChannelCmdFactory with clients to endorser and orderer according to params
//根据是否需要背书节点 排序节点 初始化cmdfactory，各个子命令执行时会调用
func InitCmdFactory(isEndorserRequired EndorserRequirement, isOrdererRequired OrdererRequirement) (*ChannelCmdFactory, error) {
	var err error

	cmdFact := &ChannelCmdFactory{}
	//获取默认签名
	cmdFact.Signer, err = common.GetDefaultSignerFnc()
	if err != nil {
		return nil, fmt.Errorf("Error getting default signer: %s", err)
	}
	// 获取广播客户端方法
	cmdFact.BroadcastFactory = func() (common.BroadcastClient, error) {
		return common.GetBroadcastClientFnc()
	}

	// join list getinfo 需要背书节点
	if isEndorserRequired {
		// 获取背书节点客户端
		cmdFact.EndorserClient, err = common.GetEndorserClientFnc()
		if err != nil {
			return nil, fmt.Errorf("Error getting endorser client %s: %s", channelFuncName, err)
		}
	}

	//create fetch 需要order节点支持
	if isOrdererRequired {
		// 校验order节点地址
		if len(strings.Split(common.OrderingEndpoint, ":")) != 2 {
			return nil, fmt.Errorf("ordering service endpoint %s is not valid or missing", common.OrderingEndpoint)
		}
		// 创建分发客户端，用于向order节点请求消息
		cmdFact.DeliverClient, err = newDeliverClient(channelID)
		if err != nil {
			return nil, err
		}
	}
	logger.Infof("Endorser and orderer connections initialized")
	return cmdFact, nil
}
